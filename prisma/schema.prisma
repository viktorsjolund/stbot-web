datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String              @id @default(cuid())
  name                String?             @unique
  email               String?             @unique
  emailVerified       DateTime?
  spotifyRefreshToken String?
  image               String?
  accounts            Account[]
  sessions            Session[]
  activeUser          ActiveUser?
  skipUser            SkipUser?
  songRedemptionUser  SongRedemptionUser?
}

model ActiveUser {
  id                 String @id @default(cuid())
  user_id            String @unique
  online_webhook_id  String?
  offline_webhook_id String?
  user               User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model SkipUser {
  id      String @id @default(cuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model SongRedemptionUser {
  id        String @id @default(cuid())
  user_id   String @unique
  reward_id String
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
